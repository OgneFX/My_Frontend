import { useEffect, useState } from "react";
import type { IQuestion } from "../../interfaces/interfaces";
import type { LaunchParams } from "@telegram-apps/sdk-react";
import styles from "./Questions.module.scss";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";

interface QuestionWindowProps {
  userObj: LaunchParams;
}

const fetchQuestions = async (userId?: number) => {
  const res = await fetch(
    `https://my-backend-cwvb.onrender.com/api/question?userId=${userId}`
  );
  if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤");
  return res.json();
};

const sendAnswer = async ({
  questionId,
  optionId,
  userId,
}: {
  questionId: number;
  optionId: number;
  userId: number;
}) => {
  const res = await fetch(
    "https://my-backend-cwvb.onrender.com/api/question/answer",
    {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ questionId, optionId, userId }),
    }
  );
  if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞");
  return res.json();
};

const formatRemaining = (until: string, now: number) => {
  const diff = new Date(until).getTime() - now;
  if (diff <= 0) return "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ";

  const minutes = Math.floor(diff / (1000 * 60));
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);

  const remHours = hours % 24;
  const remMinutes = minutes % 60;

  const parts: string[] = [];
  if (days > 0) parts.push(`${days}–¥`);
  if (remHours > 0) parts.push(`${remHours}—á`);
  parts.push(`${remMinutes}–º`);

  return parts.join(" ");
};

//–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
//–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π - —ç—Ç–æ –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç

export const Questions: React.FC<QuestionWindowProps> = ({ userObj }) => {
  const userId = userObj?.tgWebAppData?.user?.id;

  const queryClient = useQueryClient();

  const {
    data: questions = [],
    isLoading,
    isError,
  } = useQuery<IQuestion[]>({
    queryKey: ["questions", userId],
    queryFn: () => fetchQuestions(userId),
    enabled: !!userId,
  });
  console.log("–í–û–ü–†–û–°–´", questions);

  const mutation = useMutation({
    mutationFn: sendAnswer,
    onSuccess: (_, variables) => {
      queryClient.setQueryData<IQuestion[]>(["questions", userId], (old) =>
        old ? old.filter((q) => q.id !== variables.questionId) : []
      );
    },
  });

  const [now, setNow] = useState(Date.now());
  useEffect(() => {
    const interval = setInterval(() => setNow(Date.now()), 60_000); // —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    return () => clearInterval(interval);
  }, []);

  if (isLoading) return <p className={styles.done}>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...</p>;
  if (isError) return <p className={styles.done}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤</p>;

  if (!userId) {
    return (
      <div className={styles.page}>
        <h2 className={styles.heading}>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
        <p className={styles.done}>
          –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram.
        </p>
      </div>
    );
  }

  return (
    <div className={styles.page}>
      <h2 className={styles.heading}>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>

      {questions.map((question) => (
        <div key={question.id} className={styles.card}>
          <div className={styles.cardHeader}>
            <span className={styles.category}>üìÇ {question.category}</span>
            <span className={styles.date}>
              ‚è≥ {formatRemaining(question.activeUntil.toString(), now)}
            </span>
          </div>

          <p className={styles.title}>{question.title}</p>
          <p className={styles.date}>
            üë§ –ê–≤—Ç–æ—Ä: {question.author || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
          </p>

          <div className={styles.options}>
            {question.options.map((opt) => (
              <button
                key={opt.id}
                onClick={() =>
                  mutation.mutate({
                    questionId: question.id,
                    optionId: opt.id,
                    userId,
                  })
                }
                className={styles.optionButton}
                disabled={mutation.isPending}
              >
                {opt.text}
              </button>
            ))}
          </div>
        </div>
      ))}

      {questions.length === 0 && (
        <p className={styles.done}>üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–π–¥–µ–Ω—ã</p>
      )}
    </div>
  );
};
